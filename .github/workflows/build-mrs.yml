name: Build MRS & YAML from iplist (fast)

on:
  schedule:
    - cron: "15 */6 * * *"   # каждые 6 часов (UTC)
  workflow_dispatch: {}
  push:
    paths:
      - "config/**"
      - ".github/workflows/build-mrs.yml"

permissions:
  contents: write

concurrency:
  group: build-mrs-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      # Куда кладём go-бинарники/модули (чтобы кэшировать)
      GOBIN: ${{ github.workspace }}/.cache/go/bin
      GOPATH: ${{ github.workspace }}/.cache/go
      # Зафиксированная версия mihomo (совету от «стабильности»)
      MIHOMO_VERSION: v1.19.14
      # Composer — без интерактива, без аудита
      COMPOSER_PROCESS_TIMEOUT: 0
      COMPOSER_NO_INTERACTION: 1
      COMPOSER_NO_AUDIT: 1

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ===== PHP + Composer =====
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          coverage: none
          tools: composer
          extensions: curl, json

      - name: Get Composer cache dir
        id: composer-cache-dir
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Restore Composer cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache-dir.outputs.dir }}
          key: composer-cache-${{ runner.os }}-
          restore-keys: |
            composer-cache-${{ runner.os }}-

      - name: Restore vendor cache
        uses: actions/cache@v4
        with:
          path: vendor
          key: vendor-${{ runner.os }}-
          restore-keys: |
            vendor-${{ runner.os }}-

      - name: Install PHP deps
        run: composer install --no-interaction --prefer-dist --no-progress

      # ===== Go + mihomo =====
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23.x
          cache: true

      - name: Restore Go bin cache (mihomo)
        uses: actions/cache@v4
        with:
          path: .cache/go/bin
          key: go-bin-${{ runner.os }}-mihomo-${{ env.MIHOMO_VERSION }}

      - name: Restore Go mod cache
        uses: actions/cache@v4
        with:
          path: .cache/go/pkg/mod
          key: go-mod-${{ runner.os }}-mihomo-${{ env.MIHOMO_VERSION }}
          restore-keys: |
            go-mod-${{ runner.os }}-

      - name: Install mihomo (convert-ruleset)
        run: |
          echo "$GOBIN" >> $GITHUB_PATH
          if command -v mihomo >/dev/null 2>&1 && mihomo -v | grep -q "${MIHOMO_VERSION#v}"; then
            echo "mihomo cached"
          else
            # ВАЖНО: модульный путь — в нижнем регистре
            go install github.com/metacubex/mihomo@${MIHOMO_VERSION}
          fi
          mihomo -v || true

      # ===== iplist HTTP =====
      - name: Start iplist HTTP server
        run: |
          php index.php > server.log 2>&1 &
          echo $! > iplist.pid

      - name: Wait for iplist to be ready
        run: |
          for i in {1..60}; do
            if curl -sf "http://127.0.0.1:8080/?format=json" >/dev/null; then
              echo "iplist is ready"; exit 0
            fi
            sleep 1
          done
          echo "iplist service is not responding" >&2
          echo "--- server.log (tail) ---"
          tail -n 200 server.log || true
          exit 1

      # ===== Генерация текстовых списков =====
      - name: Generate text lists (.txt, per-site, per-group, all)
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p dist/mrs/domain dist/mrs/ipcidr

          # Сайты: config/<group>/<site>.json
          declare -a SITES=()
          while IFS= read -r -d '' f; do
            group="$(basename "$(dirname "$f")")"
            site="$(basename "$f" .json)"
            SITES+=("$group/$site")
          done < <(find config -type f -name '*.json' -print0)

          # Группы (категории): каталоги первого уровня
          declare -a GROUPS=()
          while IFS= read -r -d '' d; do
            GROUPS+=("$(basename "$d")")
          done < <(find config -mindepth 1 -maxdepth 1 -type d -print0)

          base="http://127.0.0.1:8080"
          # Трим CR и пустые строки
          fetch_domains() { curl -fsSL "$base/?format=text&data=domains&$1=$2" | sed 's/\r$//' | sed '/^\s*$/d'; }
          fetch_cidr()    { { curl -fsSL "$base/?format=text&data=cidr4&$1=$2"; echo; curl -fsSL "$base/?format=text&data=cidr6&$1=$2"; } \
                             | sed 's/\r$//' | sed '/^\s*$/d'; }

          # По сайтам
          for path in "${SITES[@]}"; do
            group="${path%%/*}"
            site="${path##*/}"
            fetch_domains site "$site" > "dist/mrs/domain/${group}--${site}.txt" || true
            fetch_cidr    site "$site" > "dist/mrs/ipcidr/${group}--${site}.txt" || true
          done

          # По группам (агрегаты категории)
          for g in "${GROUPS[@]}"; do
            fetch_domains group "$g" > "dist/mrs/domain/${g}.txt" || true
            fetch_cidr    group "$g" > "dist/mrs/ipcidr/${g}.txt" || true
          done

          # ALL (всё вместе из групповых .txt, без *--*.txt)
          { find dist/mrs/domain -maxdepth 1 -type f -name '*.txt' ! -name '*--*.txt' -print0 \
              | xargs -0 cat 2>/dev/null \
              | sed 's/\r$//' | sed '/^\s*$/d' \
              | LC_ALL=C sort -u > dist/mrs/domain/all.txt; } || true

          { find dist/mrs/ipcidr -maxdepth 1 -type f -name '*.txt' ! -name '*--*.txt' -print0 \
              | xargs -0 cat 2>/dev/null \
              | sed 's/\r$//' | sed '/^\s*$/d' \
              | LC_ALL=C sort -u > dist/mrs/ipcidr/all.txt; } || true

          echo "sites=${#SITES[@]} groups=${#GROUPS[@]}"

      # ===== Нормализация доменов к семантике '+.' (root + subdomains) =====
      - name: Normalize domain .txt to '+.' semantics
        shell: bash
        run: |
          set -Eeuo pipefail
          shopt -s nullglob
          for f in dist/mrs/domain/*.txt; do
            [[ -s "$f" ]] || continue
            awk '
              {
                line=$0
                # пустые — пропускаем
                if (line ~ /^[[:space:]]*$/) next
                # если уже wildcard (*...), уже с +. или .  — оставляем
                if (line ~ /^\*/ || line ~ /^\+\./ || line ~ /^\./) { print line; next }
                # если похоже на URL с / — оставляем как есть (на всякий)
                if (line ~ /\//) { print line; next }
                # иначе делаем root+subs
                print "+." line
              }
            ' "$f" | LC_ALL=C sort -u > "$f.__tmp__" && mv "$f.__tmp__" "$f"
          done

      # ===== Конвертация в .mrs =====
      - name: Convert to .mrs
        shell: bash
        run: |
          set -Eeuo pipefail
          shopt -s nullglob
          # удаляем пустые .txt, чтобы mihomo не падал на "empty rule"
          find dist/mrs -type f -name '*.txt' -size 0 -delete || true

          convert_dir() {
            local behavior="$1"  # domain | ipcidr
            local dir="$2"
            local count=0
            for f in "$dir"/*.txt; do
              [[ -s "$f" ]] || { echo "[skip] empty: $f"; continue; }
              mihomo convert-ruleset "$behavior" text "$f" "${f%.txt}.mrs"
              echo "[ok] $behavior: ${f%.txt}.mrs"
              ((count++)) || true
            done
            echo "[summary] $behavior converted: $count files"
          }
          convert_dir domain dist/mrs/domain
          convert_dir ipcidr dist/mrs/ipcidr

      # ===== Генерация YAML ruleset (payload) =====
      - name: Generate YAML ruleset (payload)
        shell: bash
        run: |
          set -Eeuo pipefail
          shopt -s nullglob
          mkdir -p dist/yaml/domain dist/yaml/ipcidr

          make_yaml_domains() {
            local in_txt="$1"
            local out_yaml="$2"
            echo "payload:" > "$out_yaml"
            sed 's/\r$//' "$in_txt" | sed '/^\s*$/d' | \
            awk '
              {
                line=$0
                # Уже wildcard/+. или . — оставляем, иначе префиксуем +.
                if (!(line ~ /^\*/ || line ~ /^\+\./ || line ~ /^\./) && !(line ~ /\//)) {
                  line = "+." line
                }
                gsub(/"/, "\\\"", line)
                print "  - \"" line "\""
              }
            ' >> "$out_yaml"
          }

          make_yaml_plain() {
            local in_txt="$1"
            local out_yaml="$2"
            echo "payload:" > "$out_yaml"
            sed 's/\r$//' "$in_txt" | sed '/^\s*$/d' | \
            awk '{gsub(/"/,"\\\""); print "  - \"" $0 "\"" }' >> "$out_yaml"
          }

          for f in dist/mrs/domain/*.txt; do
            [[ -s "$f" ]] || continue
            make_yaml_domains "$f" "dist/yaml/domain/$(basename "${f%.txt}").yaml"
          done

          for f in dist/mrs/ipcidr/*.txt; do
            [[ -s "$f" ]] || continue
            make_yaml_plain "$f" "dist/yaml/ipcidr/$(basename "${f%.txt}").yaml"
          done

      - name: Stop iplist
        if: always()
        run: |
          kill $(cat iplist.pid) || true

      # ===== Публикация артефактов =====
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rulesets
          path: |
            dist/mrs
            dist/yaml

      # ===== Коммит результатов в репозиторий =====
      - name: Commit .mrs and .yaml
        shell: bash
        run: |
          set -Eeuo pipefail

          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          shopt -s nullglob
          files=(dist/mrs/domain/*.mrs dist/mrs/ipcidr/*.mrs dist/yaml/domain/*.yaml dist/yaml/ipcidr/*.yaml)

          if (( ${#files[@]} == 0 )); then
            echo "No files to commit."
            exit 0
          fi

          # dist обычно в .gitignore — добавляем принудительно только нужные расширения
          git add -f "${files[@]}"

          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "chore(rulesets): rebuild on $(date -u +%F:%T) UTC"
            git push
          fi
