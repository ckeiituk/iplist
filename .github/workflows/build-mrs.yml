name: Build & publish MRS

on:
  schedule: [{ cron: "15 */6 * * *" }]
  workflow_dispatch:
  push:
    paths:
      - "config/**"
      - "exclude/**"
      - ".github/workflows/build-mrs.yml"

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: build-mrs-${{ github.ref }}
  cancel-in-progress: true

env:
  MIHOMO_VERSION: v1.19.14
  DOMAIN_WILDCARD: "0"
  SKIP_BOOTSTRAP: "0"

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      GOBIN: ${{ github.workspace }}/.cache/go/bin
      GOPATH: ${{ github.workspace }}/.cache/go
      COMPOSER_PROCESS_TIMEOUT: "0"
      COMPOSER_NO_INTERACTION: "1"
      COMPOSER_NO_AUDIT: "1"

    steps:
      - uses: actions/checkout@v4

      - name: Bootstrap exclude/
        if: env.SKIP_BOOTSTRAP != '1'
        run: |
          set -Eeuo pipefail
          need=0
          mapfile -t CATS < <(find config -mindepth 1 -maxdepth 1 -type d -printf '%f\n' || true)
          [[ -d exclude ]] || { mkdir -p exclude; need=1; }
          for f in domain.txt ip4.txt ip6.txt; do
            [[ -f exclude/$f ]] || { printf "# one per line\n" > exclude/$f; need=1; }
          done
          for c in "${CATS[@]}"; do
            mkdir -p "exclude/$c"
            for f in domain.txt ip4.txt ip6.txt; do
              [[ -f exclude/$c/$f ]] || { printf "# per-category: %s\n" "$c" > "exclude/$c/$f"; need=1; }
            done
          done
          if [[ $need -eq 1 ]]; then
            git config user.name  github-actions[bot]
            git config user.email 41898282+github-actions[bot]@users.noreply.github.com
            git add exclude && git commit -m "chore(exclude): bootstrap (auto)" || true
            git push || true
          fi

      - name: PHP + Composer
        uses: shivammathur/setup-php@v2
        with: { php-version: '8.2', coverage: none, tools: composer, extensions: curl, json }

      - name: Cache composer files
        uses: actions/cache@v4
        with:
          path: /home/runner/.cache/composer/files
          key: composer-files-${{ runner.os }}

      - name: composer install
        run: composer install --no-progress --prefer-dist

      - name: Go + mihomo
        uses: actions/setup-go@v5
        with: { go-version: 1.23.x, cache: false }

      - name: Cache mihomo bin
        uses: actions/cache@v4
        with:
          path: .cache/go/bin
          key: go-bin-${{ runner.os }}-mihomo-${{ env.MIHOMO_VERSION }}

      - name: Build, convert, site
        run: |
          set -Eeuo pipefail
          echo "$GOBIN" >> "$GITHUB_PATH"
          command -v mihomo >/dev/null 2>&1 && mihomo -v | grep -q "${MIHOMO_VERSION#v}" || go install github.com/metacubex/mihomo@${MIHOMO_VERSION}
          php index.php > server.log 2>&1 & echo $! > iplist.pid
          for i in {1..60}; do curl -sf "http://127.0.0.1:8080/?format=json" && break || sleep 1; done || { echo "::error::iplist not responding"; tail -n 200 server.log || true; exit 1; }

          mkdir -p dist/mrs/{domain,ipcidr}
          mapfile -d '' SFILES < <(find config -type f -name '*.json' -print0)
          mapfile -t CATS < <(find config -mindepth 1 -maxdepth 1 -type d -printf '%f\n')
          mapfile -t EX_DOM_G < <(test -f exclude/domain.txt && grep -v '^\s*#' exclude/domain.txt | sed '/^\s*$/d' || true)
          mapfile -t EX_IP4_G < <(test -f exclude/ip4.txt    && grep -v '^\s*#' exclude/ip4.txt    | sed '/^\s*$/d' || true)
          mapfile -t EX_IP6_G < <(test -f exclude/ip6.txt    && grep -v '^\s*#' exclude/ip6.txt    | sed '/^\s*$/d' || true)
          base="http://127.0.0.1:8080"

          qargs(){ printf -- '--data-urlencode\nformat=text\0--data-urlencode\n%s=%s\0' "$1" "$2"; }
          load_ex(){ local c="$1"; mapfile -t EX_DOM_L < <(test -f "exclude/$c/domain.txt" && grep -v '^\s*#' "exclude/$c/domain.txt" | sed '/^\s*$/d' || true)
                                   mapfile -t EX_IP4_L < <(test -f "exclude/$c/ip4.txt"    && grep -v '^\s*#' "exclude/$c/ip4.txt"    | sed '/^\s*$/d' || true)
                                   mapfile -t EX_IP6_L < <(test -f "exclude/$c/ip6.txt"    && grep -v '^\s*#' "exclude/$c/ip6.txt"    | sed '/^\s*$/d' || true); }
          fetch_dom(){ local k="$1" v="$2" c="$3"; load_ex "$c"; IFS=$'\0' read -r -d '' -a a < <(qargs "$k" "$v")
                       [[ "$DOMAIN_WILDCARD" == "1" ]] && a+=(--data-urlencode wildcard=1)
                       for d in "${EX_DOM_G[@]}" "${EX_DOM_L[@]}"; do a+=(--data-urlencode "exclude[domain]=$d"); done
                       curl -GfsSL "${a[@]}" --data-urlencode data=domains "$base/" | sed 's/\r$//' | sed '/^\s*$/d'; }
          fetch_cidr(){ local k="$1" v="$2" c="$3"; load_ex "$c"; IFS=$'\0' read -r -d '' -a a < <(qargs "$k" "$v")
                       for i in "${EX_IP4_G[@]}" "${EX_IP4_L[@]}"; do a+=(--data-urlencode "exclude[ip4]=$i"); done
                       for i in "${EX_IP6_G[@]}" "${EX_IP6_L[@]}"; do a+=(--data-urlencode "exclude[ip6]=$i"); done
                       { curl -GfsSL "${a[@]}" --data-urlencode data=cidr4 "$base/"; echo; curl -GfsSL "${a[@]}" --data-urlencode data=cidr6 "$base/"; } | sed 's/\r$//' | sed '/^\s*$/d'; }

          for f in "${SFILES[@]}"; do
            catg="$(basename "$(dirname "$f")")"; site="$(basename "$f" .json)"
            fetch_dom site "$site" "$catg" > "dist/mrs/domain/${catg}--${site}.txt" || true
            fetch_cidr site "$site" "$catg" > "dist/mrs/ipcidr/${catg}--${site}.txt" || true
          done
          for c in "${CATS[@]}"; do
            fetch_dom group "$c" "$c" > "dist/mrs/domain/${c}.txt" || true
            fetch_cidr group "$c" "$c" > "dist/mrs/ipcidr/${c}.txt" || true
          done
          { shopt -s nullglob
            tmp="$(mktemp)"; for f in dist/mrs/domain/*.txt; do [[ $f == *--* ]] || cat "$f"; done | sed '/^\s*$/d' | sort -u > "$tmp"; [[ -s $tmp ]] && mv "$tmp" dist/mrs/domain/_all.txt || rm -f "$tmp"
            tmp="$(mktemp)"; for f in dist/mrs/ipcidr/*.txt;  do [[ $f == *--* ]] || cat "$f"; done | sed '/^\s*$/d' | sort -u > "$tmp"; [[ -s $tmp ]] && mv "$tmp" dist/mrs/ipcidr/_all.txt  || rm -f "$tmp"
          }

          # convert -> .mrs (skip empty)
          conv(){ local be="$1" dir="$2" n=0; shopt -s nullglob; for f in "$dir"/*.txt; do [[ -s $f ]] || continue; mihomo convert-ruleset "$be" text "$f" "${f%.txt}.mrs"; ((n++))||true; done; echo "$be: $n files"; }
          conv domain dist/mrs/domain
          conv ipcidr dist/mrs/ipcidr

          # stop server
          kill "$(cat iplist.pid)" || true

          # static site
          rm -rf site && mkdir -p site
          shopt -s globstar nullglob
          for f in dist/mrs/**/*.mrs; do rel="${f#dist/mrs/}"; mkdir -p "site/$(dirname "$rel")"; cp "$f" "site/$rel"; done
          { echo "<!doctype html><meta charset='utf-8'><title>iplist MRS</title>"
            echo "<h1>iplist â†’ .mrs</h1><pre>"; find site -type f -name '*.mrs' | sed 's#^site/##' | sort; echo "</pre>"; } > site/index.html
          ( cd site && find . -type f -name '*.mrs' | sort > index.txt )

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with: { name: mrs, path: dist/mrs }

      - uses: actions/configure-pages@v5
        with: { enablement: true }

      - uses: actions/upload-pages-artifact@v3
        with: { path: ./site }

      - uses: actions/deploy-pages@v4
        id: deployment

      - name: Commit dist/mrs (optional)
        run: |
          git config user.name  github-actions[bot]
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com
          git add dist/mrs
          git diff --cached --quiet || { git commit -m "chore(mrs): rebuild $(date -u +%F:%T) UTC" && git push; }
