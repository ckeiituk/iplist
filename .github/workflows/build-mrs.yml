name: Build MRS from iplist (pages, fast & robust, with categories)

on:
  schedule:
    - cron: "15 */6 * * *"   # каждые 6 часов (UTC)
  workflow_dispatch: {}
  push:
    paths:
      - "config/**"
      - ".github/workflows/build-mrs.yml"

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: build-mrs-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      MIHOMO_VERSION: v1.19.14
      GOBIN:  ${{ github.workspace }}/.cache/go/bin
      GOPATH: ${{ github.workspace }}/.cache/go
      DOMAIN_WILDCARD: "0"  # поставь "1", если нужно &wildcard=1 для доменных списков

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---------- PHP + Composer ----------
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          tools: composer
          coverage: none
          extensions: curl, json

      - name: Get Composer cache dir
        id: composer-cache-dir
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Restore Composer cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache-dir.outputs.dir }}
          key: composer-cache-${{ runner.os }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            composer-cache-${{ runner.os }}-

      - name: Restore vendor cache
        uses: actions/cache@v4
        with:
          path: vendor
          key: vendor-${{ runner.os }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            vendor-${{ runner.os }}-

      - name: Install PHP deps
        env:
          COMPOSER_PROCESS_TIMEOUT: "0"
          COMPOSER_NO_INTERACTION: "1"
          COMPOSER_NO_AUDIT: "1"
        run: composer install --no-interaction --prefer-dist --no-progress

      # ---------- Go + mihomo ----------
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.x'

      - name: Restore Go bin cache (mihomo)
        uses: actions/cache@v4
        with:
          path: .cache/go/bin
          key: go-bin-${{ runner.os }}-mihomo-${{ env.MIHOMO_VERSION }}

      - name: Restore Go mod cache
        uses: actions/cache@v4
        with:
          path: .cache/go/pkg/mod
          key: go-mod-${{ runner.os }}-mihomo-${{ env.MIHOMO_VERSION }}
          restore-keys: |
            go-mod-${{ runner.os }}-

      - name: Install mihomo (convert-ruleset)
        run: |
          set -e
          echo "$GOBIN" >> $GITHUB_PATH
          if command -v mihomo >/dev/null 2>&1 && mihomo -v | grep -q "${MIHOMO_VERSION#v}"; then
            echo "mihomo cached"
          else
            # модульный путь — в нижнем регистре
            go install github.com/metacubex/mihomo@${MIHOMO_VERSION}
          fi
          mihomo -v

      # ---------- iplist HTTP ----------
      - name: Start iplist HTTP server
        run: |
          php index.php > server.log 2>&1 &
          echo $! > iplist.pid

      - name: Wait for iplist to be ready
        run: |
          for i in {1..60}; do
            if curl -sf "http://127.0.0.1:8080/?format=json" >/dev/null; then
              echo "iplist is ready"
              exit 0
            fi
            sleep 1
          done
          echo "::error::iplist service is not responding"
          echo "--- server.log (tail) ---"
          tail -n 200 server.log || true
          exit 1

      # ---------- Генерация списков (site, category, all) ----------
      - name: Generate text lists
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p dist/mrs/domain dist/mrs/ipcidr

          # Сайты: config/<category>/<site>.json
          declare -a SITES=()
          while IFS= read -r -d '' f; do
            category="$(basename "$(dirname "$f")")"
            site="$(basename "$f" .json)"
            SITES+=("$category/$site")
          done < <(find config -type f -name '*.json' -print0)

          # Категории (группы): каталоги первого уровня
          declare -a CATEGORIES=()
          while IFS= read -r -d '' d; do
            CATEGORIES+=("$(basename "$d")")
          done < <(find config -mindepth 1 -maxdepth 1 -type d -print0)

          base="http://127.0.0.1:8080"
          # Удаляем CR и пустые строки: mihomo не любит пустые правила
          fetch_domains() {
            local key="$1" val="$2" w=""
            [[ "${DOMAIN_WILDCARD}" == "1" ]] && w="&wildcard=1"
            curl -fsSL "$base/?format=text&data=domains&${key}=${val}${w}" \
              | sed 's/\r$//' | sed '/^\s*$/d'
          }
          fetch_cidr() {
            local key="$1" val="$2"
            { curl -fsSL "$base/?format=text&data=cidr4&${key}=${val}"; echo; \
              curl -fsSL "$base/?format=text&data=cidr6&${key}=${val}"; } \
              | sed 's/\r$//' | sed '/^\s*$/d'
          }

          # По сайтам (site-level)
          for path in "${SITES[@]}"; do
            category="${path%%/*}"
            site="${path##*/}"
            fetch_domains site "$site" > "dist/mrs/domain/${category}--${site}.txt" || true
            fetch_cidr    site "$site" > "dist/mrs/ipcidr/${category}--${site}.txt" || true
          done

          # По категориям (category-level агрегаты)
          for c in "${CATEGORIES[@]}"; do
            fetch_domains group "$c" > "dist/mrs/domain/${c}.txt" || true
            fetch_cidr    group "$c" > "dist/mrs/ipcidr/${c}.txt" || true
          done

          # Агрегат «всё сразу» (только из категорий, чтобы не удваивать сайты)
          {
            shopt -s nullglob
            # domain/_all.txt
            tmp="$(mktemp)"
            for f in dist/mrs/domain/*.txt; do
              [[ "$f" == *--* ]] && continue   # пропускаем site-level
              cat "$f"
            done | sed '/^\s*$/d' | sort -u > "$tmp"
            if [[ -s "$tmp" ]]; then mv "$tmp" dist/mrs/domain/_all.txt; else rm -f "$tmp"; fi

            # ipcidr/_all.txt
            tmp="$(mktemp)"
            for f in dist/mrs/ipcidr/*.txt; do
              [[ "$f" == *--* ]] && continue
              cat "$f"
            done | sed '/^\s*$/d' | sort -u > "$tmp"
            if [[ -s "$tmp" ]]; then mv "$tmp" dist/mrs/ipcidr/_all.txt; else rm -f "$tmp"; fi
          }

          echo "sites=${#SITES[@]} categories=${#CATEGORIES[@]}"

      # ---------- Конвертация в .mrs (safe) ----------
      - name: Convert to .mrs
        shell: bash
        run: |
          set -Eeuo pipefail
          shopt -s nullglob

          # Удалим нулевые .txt — иначе mihomo паникнёт
          find dist/mrs -type f -name '*.txt' -size 0 -delete || true

          convert_dir() {
            local behavior="$1"  # domain | ipcidr
            local dir="$2"
            local count=0
            for f in "$dir"/*.txt; do
              [[ -s "$f" ]] || { echo "[skip] empty: $f"; continue; }
              mihomo convert-ruleset "$behavior" text "$f" "${f%.txt}.mrs"
              echo "[ok] $behavior: ${f%.txt}.mrs"
              ((count++)) || true
            done
            echo "[summary] $behavior converted: $count files"
          }

          convert_dir domain dist/mrs/domain
          convert_dir ipcidr dist/mrs/ipcidr

      - name: Stop iplist
        if: always()
        run: |
          kill $(cat iplist.pid) || true

      # ---------- GitHub Pages ----------
      - name: Prepare Pages site
        run: |
          set -Eeuo pipefail
          rm -rf site
          mkdir -p site
          shopt -s globstar nullglob
          # Копируем только .mrs, сохраняя структуру
          for f in dist/mrs/**/*.mrs; do
            rel="${f#dist/mrs/}"
            mkdir -p "site/$(dirname "$rel")"
            cp "$f" "site/$rel"
          done
          # index.html для навигации
          {
            echo "<!doctype html><meta charset='utf-8'><title>iplist MRS</title>"
            echo "<h1>iplist → .mrs</h1><p>Level: site, category, all</p><pre>"
            find site -type f -name '*.mrs' | sed 's#^site/##' | sort
            echo "</pre>"
          } > site/index.html
          ( cd site && find . -type f -name '*.mrs' | sort > index.txt )

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact for Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
