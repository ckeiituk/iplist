name: Build MRS from iplist (fast & robust)

on:
  schedule:
    - cron: "15 */6 * * *"   # каждые 6 часов (UTC)
  workflow_dispatch: {}
  push:
    paths:
      - "config/**"
      - ".github/workflows/build-mrs.yml"

permissions:
  contents: write

concurrency:
  group: build-mrs-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      # куда go install положит mihomo
      GOBIN: ${{ github.workspace }}/.cache/go/bin
      GOPATH: ${{ github.workspace }}/.cache/go
      # пин версии mihomo (менять осознанно)
      MIHOMO_VERSION: v1.19.14
      # composer — чтобы не виснуть в сети
      COMPOSER_PROCESS_TIMEOUT: 0
      COMPOSER_NO_INTERACTION: 1
      COMPOSER_NO_AUDIT: 1

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---------- PHP + Composer (быстро через setup-php) ----------
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          tools: composer
          coverage: none
          extensions: curl, json

      - name: Get Composer cache dir
        id: composer-cache-dir
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Restore Composer cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache-dir.outputs.dir }}
          # lock-файла может не быть — ключ без хэша ок
          key: composer-cache-${{ runner.os }}-
          restore-keys: |
            composer-cache-${{ runner.os }}-

      - name: Restore vendor cache
        uses: actions/cache@v4
        with:
          path: vendor
          key: vendor-${{ runner.os }}-
          restore-keys: |
            vendor-${{ runner.os }}-

      - name: Install PHP deps
        run: composer install --no-interaction --prefer-dist --no-progress

      # ---------- Go + mihomo ----------
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.x'
          cache: false   # свой кэш ниже

      - name: Restore Go bin cache (mihomo)
        uses: actions/cache@v4
        with:
          path: .cache/go/bin
          key: go-bin-${{ runner.os }}-mihomo-${{ env.MIHOMO_VERSION }}

      - name: Restore Go mod cache
        uses: actions/cache@v4
        with:
          path: .cache/go/pkg/mod
          key: go-mod-${{ runner.os }}-mihomo-${{ env.MIHOMO_VERSION }}
          restore-keys: |
            go-mod-${{ runner.os }}-

      - name: Install mihomo (convert-ruleset)
        run: |
          echo "$GOBIN" >> $GITHUB_PATH
          if command -v mihomo >/dev/null 2>&1 && mihomo -v | grep -q "${MIHOMO_VERSION#v}"; then
            echo "mihomo cached"
          else
            # правильный модульный путь — нижний регистр
            go install github.com/metacubex/mihomo@${MIHOMO_VERSION}
          fi
          mihomo -v

      # ---------- iplist HTTP ----------
      - name: Start iplist HTTP server
        run: |
          php index.php > server.log 2>&1 &
          echo $! > iplist.pid

      - name: Wait for iplist to be ready
        run: |
          for i in {1..60}; do
            if curl -sf "http://127.0.0.1:8080/?format=json" >/dev/null; then
              echo "iplist is ready"
              exit 0
            fi
            sleep 1
          done
          echo "iplist service is not responding" >&2
          echo "--- server.log (tail) ---"
          tail -n 200 server.log || true
          exit 1

      # ---------- Генерация списков (site → group → all) ----------
      - name: Generate text lists (sites → groups → all)
        shell: bash
        run: |
          set -Eeuo pipefail
          shopt -s nullglob
          mkdir -p dist/mrs/domain dist/mrs/ipcidr

          # 1) сайты: config/<group>/<site>.json
          declare -a SITES=()
          while IFS= read -r -d '' f; do
            group="$(basename "$(dirname "$f")")"
            site="$(basename "$f" .json)"
            SITES+=("$group/$site")
          done < <(find config -type f -name '*.json' -print0)

          # 2) группы — уникальные из SITES
          declare -A seen=()
          for path in "${SITES[@]}"; do
            g="${path%%/*}"
            seen["$g"]=1
          done
          GROUPS=("${!seen[@]}")

          base="http://127.0.0.1:8080"
          trim(){ sed 's/\r$//' | sed '/^\s*$/d'; }
          fetch_domains(){ curl -fsSL "$base/?format=text&data=domains&$1=$2" | trim; }
          fetch_cidr(){ { curl -fsSL "$base/?format=text&data=cidr4&$1=$2"; echo; curl -fsSL "$base/?format=text&data=cidr6&$1=$2"; } | trim; }

          # 3) по сайтам → group--site.txt
          for path in "${SITES[@]}"; do
            group="${path%%/*}"
            site="${path##*/}"
            fetch_domains site "$site" > "dist/mrs/domain/${group}--${site}.txt" || true
            fetch_cidr    site "$site" > "dist/mrs/ipcidr/${group}--${site}.txt" || true
          done

          # 4) по группам → dedup из всех site-файлов этой группы
          for g in "${GROUPS[@]}"; do
            { cat dist/mrs/domain/"$g"--*.txt 2>/dev/null | trim | LC_ALL=C sort -u > "dist/mrs/domain/${g}.txt"; } || true
            { cat dist/mrs/ipcidr/"$g"--*.txt  2>/dev/null | trim | LC_ALL=C sort -u > "dist/mrs/ipcidr/${g}.txt"; } || true
          done

          # 5) ALL → dedup из всех site-файлов
          { cat dist/mrs/domain/*--*.txt 2>/dev/null | trim | LC_ALL=C sort -u > dist/mrs/domain/all.txt; } || true
          { cat dist/mrs/ipcidr/*--*.txt  2>/dev/null | trim | LC_ALL=C sort -u > dist/mrs/ipcidr/all.txt; } || true

          echo "sites=${#SITES[@]} groups=${#GROUPS[@]}"

      # ---------- Конвертация в .mrs (site + group + all) ----------
      - name: Convert to .mrs
        shell: bash
        run: |
          set -Eeuo pipefail
          shopt -s nullglob

          # удалим пустые .txt, чтобы mihomo не падал "panic: empty rule"
          find dist/mrs -type f -name '*.txt' -size 0 -delete || true

          convert_dir() {
            local behavior="$1"  # domain | ipcidr
            local dir="$2"
            local n_site=0 n_group=0 n_all=0

            # site-level
            for f in "$dir"/*--*.txt; do
              [[ -s "$f" ]] || { echo "[skip] empty: $f"; continue; }
              mihomo convert-ruleset "$behavior" text "$f" "${f%.txt}.mrs"
              echo "[ok] $behavior: ${f%.txt}.mrs"
              ((n_site++)) || true
            done

            # group-level
            for f in "$dir"/*.txt; do
              [[ "$f" == *"--"* ]] && continue
              [[ "$(basename "$f")" == "all.txt" ]] && continue
              [[ -s "$f" ]] || { echo "[skip] empty: $f"; continue; }
              mihomo convert-ruleset "$behavior" text "$f" "${f%.txt}.mrs"
              echo "[ok] $behavior: ${f%.txt}.mrs"
              ((n_group++)) || true
            done

            # all
            if [[ -s "$dir/all.txt" ]]; then
              mihomo convert-ruleset "$behavior" text "$dir/all.txt" "$dir/all.mrs"
              echo "[ok] $behavior: $dir/all.mrs"
              ((n_all++)) || true
            else
              echo "[skip] empty: $dir/all.txt"
            fi

            echo "[summary] $behavior converted: site=$n_site group=$n_group all=$n_all total=$((n_site+n_group+n_all))"
          }

          convert_dir domain dist/mrs/domain
          convert_dir ipcidr dist/mrs/ipcidr

      - name: Stop iplist
        if: always()
        run: |
          kill $(cat iplist.pid) || true

      # ---------- Публикация ----------
      - name: Upload artifacts (.mrs only)
        uses: actions/upload-artifact@v4
        with:
          name: mrs
          path: |
            dist/mrs/domain/*.mrs
            dist/mrs/ipcidr/*.mrs

      - name: Commit artifacts (.mrs only; dist is gitignored)
        shell: bash
        run: |
          set -Eeuo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          shopt -s nullglob
          files=(dist/mrs/domain/*.mrs dist/mrs/ipcidr/*.mrs)

          if (( ${#files[@]} == 0 )); then
            echo "No .mrs files to commit."
            exit 0
          fi

          # dist/ обычно в .gitignore — добавляем форсом
          git add -f "${files[@]}"

          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "chore(mrs): rebuild on $(date -u +%F:%T) UTC"
            git push
          fi
